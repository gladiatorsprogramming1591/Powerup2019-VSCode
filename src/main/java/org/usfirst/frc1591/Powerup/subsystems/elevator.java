// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.Powerup.subsystems;

import org.usfirst.frc1591.Powerup.Robot;
import org.usfirst.frc1591.Powerup.RobotMap;
import org.usfirst.frc1591.Powerup.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class elevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController elevatorSpark = RobotMap.elevatorelevatorSpark;
    private final DigitalInput elevatorUpperLimit = RobotMap.elevatorelevatorUpperLimit;
    private final DigitalInput elevatorLowerLimit = RobotMap.elevatorelevatorLowerLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private long lastTimeElevatorUpdated;
	private double rampSpeed;
	private int powerY;
	private int numIter;
	
	public elevator() {
		powerY = 0;
    	rampSpeed = 1;
    	lastTimeElevatorUpdated = System.currentTimeMillis();
    	numIter = 0;
	}

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new elevatorManual());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
       
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	
    }
    //Turn on in positive direction, extend elevator upwards
   
    public void joystickElevator(double joystickY) {
    	
//    	SmartDashboard.putData("elevatorUpperLimit", elevatorUpperLimit);
//        SmartDashboard.putData("elevatorLowerLimit", elevatorLowerLimit);
    	
//    	//Checking limit switches
//        if ((elevatorUpperLimit.get()==true) && (joystickY > 0)) {
//        	elevatorSpark.set(0);
//        }
//        if ((elevatorLowerLimit.get()==true) && (joystickY < 0)){
//        	elevatorSpark.set(0);
//        }
        
        //Ramp based on time
    	long currentTimeMS = System.currentTimeMillis();
    	double deltaTimeSec = (currentTimeMS - lastTimeElevatorUpdated) / 1000.0;
    	double ramp = rampSpeed * deltaTimeSec;
    	lastTimeElevatorUpdated = currentTimeMS;

    	final double DEAD_ZONE_THRESHOLD = 0.03;
    
        //To create a dead zone in the middle of the joy stick. 
    	if (Math.abs(joystickY) < DEAD_ZONE_THRESHOLD) {
    		joystickY = 0;
    	}

		//Make the elevator stop
    	if (joystickY == 0) {
    		powerY = 0;
    	}
    	//make the elevator move
    	else {
	    	//Creates a dead zone while the joystick is being held in a specific position
	    	if (Math.abs(powerY - joystickY) > DEAD_ZONE_THRESHOLD) {
	    		//Make the elevator speed up/slow down. Needed on y axis only.
	    		if (powerY < joystickY) {
	    			powerY += ramp;
	    		}
	    		else if (powerY > joystickY) {
	    			powerY -= ramp;
	    		}
	    	}
    	}
    	//communicate to motor controller
    	//elevatorSpark.set(powerY);
    	if (elevatorUpperLimit.get() == true || Robot.oi.elevatorStick.getRawButton(2)) {  // Below upper limit or bypass button pressed
    		if ((joystickY > 0 ) && (elevatorLowerLimit.get() == true)) { // Between limits going down (y inverted)
    			elevatorSpark.set(joystickY * 0.7);
    		}
    		else if (joystickY < 0) {  // Below upper limit going up
    			elevatorSpark.set(joystickY * 1.0);
    		}
    		else {
    			elevatorSpark.set(0);
    		}
    	}
    	else if ( joystickY > 0){  // Above/at upper limit going down
    		
    		elevatorSpark.set(joystickY * .7);
    	}
    	else {
    		elevatorSpark.set(0);
    	}
    	//put variables on shuffleboard
//    	SmartDashboard.putNumber("Ramp", ramp);
//    	SmartDashboard.putNumber("powerY", powerY);
    
//    	if ((numIter++ % 20) == 0) {
//    		System.out.println("elevatorRamp " + ramp);
//    		System.out.println("elevatorPowerY" + powerY);
//    		System.out.println("elevatorDeltaTime" + deltaTimeSec);
//    		System.out.println("joystickY" + joystickY);
//    	}
    }

    

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

