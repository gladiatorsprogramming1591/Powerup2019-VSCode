// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.Powerup.subsystems;

import org.usfirst.frc1591.Powerup.RobotMap;
import org.usfirst.frc1591.Powerup.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class driveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftTalon = RobotMap.driveTrainleftTalon;
    private final WPI_TalonSRX rightTalon = RobotMap.driveTrainrightTalon;
    private final RobotDrive robotDrive = RobotMap.driveTrainrobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    //variables
    private double powerY;
    private double rampSpeed;
    private long lastTimeDriveTrainUpdated;
    private int numIter;
    
    public driveTrain() {
    	powerY = 0;
    	rampSpeed = 0.5;
    	lastTimeDriveTrainUpdated = System.currentTimeMillis();
    	numIter = 0;
    	//Sets the ramp for the talons with 10 milisecond timeout
    	leftTalon.configOpenloopRamp(rampSpeed, 10);
    	rightTalon.configOpenloopRamp(rampSpeed, 10);
      	leftTalon.configClosedloopRamp(rampSpeed, 10);
    	rightTalon.configClosedloopRamp(rampSpeed, 10);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new driveManual());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
//    	SmartDashboard.putNumber("PowerY", powerY);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    //Setting ramp speed
    public void setRampSpeed(double rs) {
    	rampSpeed = rs;
    }
    
    public void drive (double joystickX, double joystickY) {
    	//Ramp based on time
    	long currentTimeMS = System.currentTimeMillis();
    	double deltaTimeSec = (currentTimeMS - lastTimeDriveTrainUpdated) / 1000.0;
    	double ramp = rampSpeed * deltaTimeSec;
    	lastTimeDriveTrainUpdated = currentTimeMS;

    	final double DEAD_ZONE_THRESHOLD = 0.03;
    
        //To create a dead zone in the middle of the joy stick. 
    	if (Math.abs(joystickX) < DEAD_ZONE_THRESHOLD) {
    		joystickX = 0;
    	}
    	if (Math.abs(joystickY) < DEAD_ZONE_THRESHOLD) {
    		joystickY = 0;
    	}

		//Make the robot stop
    	if (joystickY == 0) {
    		powerY = 0;
    	}
    	//make the robot move
    	else {
	    	//Creates a dead zone while the joystick is being held in a specific position
	    	if (Math.abs(powerY - joystickY) > DEAD_ZONE_THRESHOLD) {
	    		//Make the wheel speed up/slow down. Needed on y axis not x.
	    		if (powerY < joystickY) {
	    			powerY += ramp;
	    		}
	    		else if (powerY > joystickY) {
	    			powerY -= ramp;
	    		}
	    	}
    	}
    	//communicate to motor controller
    	
    	robotDrive.arcadeDrive(joystickX, joystickY);
    	
    	//put variables on shuffleboard
//    	SmartDashboard.putNumber("Ramp", ramp);
//    	SmartDashboard.putNumber("powerY", powerY);
    
//    	if ((numIter++ % 20) == 0) {
//    		System.out.println("Ramp " + ramp);
//    		System.out.println("powerY" + powerY);
//    		System.out.println("deltaTime" + deltaTimeSec);
//    	}
    }
}
