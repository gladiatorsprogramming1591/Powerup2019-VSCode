// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.Powerup.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
import org.usfirst.frc1591.Powerup.subsystems.*;

/**
 *
 */
public class autoCenter extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public autoCenter() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
//    	String gameData;
//    	gameData = DriverStation.getInstance().getGameSpecificMessage();
//    	System.out.println(gameData);
//    	if (gameData.length()> 0) {
//    		if (gameData.charAt(0) == 'L') {
//    			autoCenterL(); 
//    		}
//    		else {
//    			autoCenterR();
//    		}
//    	}
//        // Add Commands here:
//        // e.g. addSequential(new Command1());
//        //      addSequential(new Command2());
//        // these will run in order.
//
//        // To run multiple commands at the same time,
//        // use addParallel()
//        // e.g. addParallel(new Command1());
//        //      addSequential(new Command2());
//        // Command1 and Command2 will run in parallel.
//
//        // A command group will require all of the subsystems that each member
//        // would require.
//        // e.g. if Command1 requires chassis, and Command2 requires arm,
//        // a CommandGroup containing them would require both the chassis and the
//        // arm.
//        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
//
//    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
// 
//    }
//
//	private void autoCenterR() {
//		addSequential(new clawClose());						//tighten grip on cube
//		addSequential(new elevatorAuto(-.5, .5));			//lower elevator to drop cube
//		addSequential(new elevatorAuto(.5, 1));				//raise elevator to correct height
//		addSequential(new driveAutonomous(.1, -.7, 3)); 	//drive forward to switch
//		addSequential(new clawOpen());						//open claw to release cube
//	}
//
//	private void autoCenterL() {
//		addSequential(new clawClose());						//tighten grip on cube
//		addSequential(new elevatorAuto(-.5, .5));			//lower elevator to drop cube
//		addSequential(new elevatorAuto(.5, 1));				//raise elevator to correct height
//		addSequential(new driveAutonomous(.1, -.7, 3)); 	//drive forward to switch
//		//addSequential(new clawOpen());						//open claw to release cube
////		addSequential(new clawClose());						//tighten grip on cube
////		addSequential(new elevatorAuto(-.5, .5));			//lower elevator to drop cube
////		addSequential(new elevatorAuto(.5, 1));				//raise elevator to correct height
////		addSequential(new driveAutonomous(.1, -.7, 1));		//drive forward slightly
////		addSequential(new driveAutonomous(-.7, 0, 1.5));	//rotate 90 degrees left
////		addSequential(new driveAutonomous(.1, -.7, 2.5));	//drive forward to left switch
////		addSequential(new driveAutonomous(.7, 0, 1.5));		//rotate 90 degrees right
////		addSequential(new driveAutonomous(.1, -.7, 2));		//drive forward to switch
////		//addSequential(new clawOpen());						//open claw to drop cube
	} 
}
