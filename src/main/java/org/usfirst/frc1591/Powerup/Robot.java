// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.Powerup;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc1591.Powerup.commands.*;
import org.usfirst.frc1591.Powerup.subsystems.*;
import edu.wpi.first.wpilibj.DriverStation;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static driveTrain driveTrain;
    public static Lift lift;
    public static claw claw;
    public static elevator elevator;
    public static sensors sensors;
    Command m_Straight;
    Command m_Left;
    Command m_Center;
    Command m_Right;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new driveTrain();
        //SmartDashboard.putData(driveTrain);
        lift = new Lift();
        claw = new claw();
        elevator = new elevator();
        sensors = new sensors();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        
        m_Straight = new driveAutonomous(.12, -.7, 3);
        chooser.addDefault("Drive Stright", m_Straight);
        m_Left = new autoLeft();
        chooser.addObject("Auto Left", m_Left);
        m_Center = new autoCenter();
        chooser.addObject("Auto Center", m_Center);
        m_Right = new autoRight();
        chooser.addObject("Auto Right", m_Right);
//        chooser.addObject("Auto Right", m_Right);
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        //chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	
        autonomousCommand = (Command) chooser.getSelected();
    	Command autoCmd = autonomousCommand;
    	String gameData;
    	gameData = DriverStation.getInstance().getGameSpecificMessage();
    	System.out.println(gameData);
    	if (gameData.length( )> 0) {
			if (autonomousCommand == m_Left) {
    		    if (gameData.charAt(1) == 'L') {
    				autoCmd = new autoLeftScale(); 
    			}
    		    else if (gameData.charAt(0) == 'L') {
    				if (autonomousCommand == m_Left) {
    					autoCmd = new autoLeftSwitch(); 
    				}
    			}
    		    else {
    		    	autoCmd = m_Straight;
    		    }
    		}
			else if (autonomousCommand == m_Right) {
    		    if (gameData.charAt(1) == 'R') {
    				autoCmd = new autoRightScale(); 
    			}
    		    else if (gameData.charAt(0) == 'R') {
    				if (autonomousCommand == m_Left) {
    					autoCmd = new autoRightSwitch(); 
    				}
    			}
    		    else {
    		    	autoCmd = m_Straight;
    		    }
    		}
    		else {
    			if (gameData.charAt(0) == 'R') {
    				autoCmd = new autoCenterRight();
    			}
    			else {
    				autoCmd = new autoCenterLeft();
    			}
    			
    		}
    	}

        // schedule the autonomous command (example)
        //if (autonomousCommand != null) 
        	autoCmd.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
