// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.Powerup.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1591.Powerup.Robot;

/**
 *
 */
public class driveManual extends Command {
	
	boolean rampDrive;
	boolean lowGearDrive;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public driveManual() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	rampDrive = true;
    	lowGearDrive = false;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    	
    	//deciding which way to drive
    	if (Robot.oi.driveStick.getRawButton(3) && rampDrive == true) {
    		rampDrive = false;
    		lowGearDrive = true;
    	}
    	else if (Robot.oi.driveStick.getRawButton(4) && lowGearDrive == true) {
    		rampDrive = true;
    		lowGearDrive = false;
    	}
    	
    	//drive scaling constants
    	final double rampDriveLinearScale = 1.0;
    	final double rampDriveTurningScale = 1.3; 
    	final double lowGearDriveLinearScale = 1.4; 
    	final double lowGearDriveTurningScale = 1.5; 
    	
    	//calling decided drive mode
    	if (rampDrive == true) {
    		Robot.driveTrain.drive(Robot.oi.driveStick.getRawAxis(0) / rampDriveTurningScale, Robot.oi.driveStick.getRawAxis(1) / rampDriveLinearScale);
    	}
    	if (lowGearDrive == true) {
    		Robot.driveTrain.drive(Robot.oi.driveStick.getRawAxis(0) / lowGearDriveTurningScale, Robot.oi.driveStick.getRawAxis(1) / lowGearDriveLinearScale);
    	}
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
